import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { GeneratePodcastProps } from '@/types'
import { Button } from './ui/button'
import { Check, Loader, RotateCcw, ThumbsDown, ThumbsUp, X } from 'lucide-react'
import { useCreatePodcast } from '@/hooks/useCreatePodcast'

const GeneratePodcast = (props: GeneratePodcastProps) => {
  const {
    audio,
    setAudioDuration,
    voicePrompt,
    setVoicePrompt,
    transcription,
    setTranscription,
    setAudio
  } = props
  const { createTranscription, createPodcast, isGenerating } =
    useCreatePodcast(props)

  function handleReset() {
    setTranscription('')
    setAudio('')
  }

  return (
    <div>
      {transcription ? (
        <>
          <div className="grid w-full gap-1.5">
            <Label htmlFor="promptAi">Transcription generated by AI</Label>
            <Textarea
              className="h-60 resize-none"
              onChange={(e) => setTranscription(e.target.value)}
              id="transcriptionAi"
              value={transcription}
            />
          </div>
          {audio ? (
            <div>
              <audio
                src={audio}
                controls
                className="mt-2"
                autoPlay
                onLoadedMetadata={(e) =>
                  setAudioDuration(e.currentTarget.duration)
                }
              />
              <Button onClick={handleReset} className="mt-2">
                <RotateCcw className="mr-2 h-4 w-4" />
                Reset Transcription
              </Button>
            </div>
          ) : isGenerating ? (
            <Button className="mt-2" disabled>
              <Loader className="mr-2 h-4 w-4 animate-spin" />
              Generating
            </Button>
          ) : (
            <div className="isolate mt-2 flex -space-x-px">
              <Button
                variant="default"
                size={'icon'}
                className="rounded-r-none focus:z-10"
                onClick={handleReset}
                disabled={isGenerating}
                type="button"
              >
                <ThumbsDown className="h-4 w-4" />
              </Button>
              <Button
                variant="success"
                size={'icon'}
                className="rounded-l-none focus:z-10"
                onClick={createPodcast}
                disabled={isGenerating}
                type="button"
              >
                <ThumbsUp className="h-4 w-4" />
              </Button>
            </div>
          )}
        </>
      ) : (
        <>
          <div className="grid w-full gap-1.5">
            <Label htmlFor="promptAi">AI prompt to generate podcast</Label>
            <Textarea
              className="resize-none"
              placeholder="Provide text to AI to generate podcast"
              onChange={(e) => setVoicePrompt(e.target.value)}
              id="promptAi"
              value={voicePrompt}
            />
          </div>
          <Button
            type="button"
            aria-label="Generate Podcast"
            className="mt-2"
            size={'sm'}
            onClick={createTranscription}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                Generating
                <Loader size={20} className="ml-2 animate-spin" />
              </>
            ) : (
              'Generate'
            )}
          </Button>
        </>
      )}
    </div>
  )
}

export default GeneratePodcast
